AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  todo-app

  Sample SAM Template for todo-app

Parameters:      
  StackPrefix:
    Description: Stack Resource Name Prefix
    Type: String
    Default: Demo
  UsersTableName:
    Type: String
    Default: users    
  TracingValue:
    Type: String
    Default: Active
  Stage:
    Type: String
    Default: Prod
  MemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 128
Conditions:
  TracingEnabled: !Equals [!Ref TracingValue, Active]

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    MemorySize: !Ref MemorySize
    Tracing: !Ref TracingValue
  Api:
    TracingEnabled: !If [TracingEnabled , true, false]
Resources:
  HelloWorldFunction:
# Lambda Function  
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: hello-world    
      CodeUri: hello-world/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
      - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: GET
            RestApiId: !Ref HelloApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
  PostUsersFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x    
    Properties:
      FunctionName: post-user-function
      CodeUri: app/cmd/users/          
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
      - x86_64
      # TODO
      Policies: 
      - AmazonDynamoDBFullAccess           
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /users
            Method: POST
            RestApiId: !Ref UserApi
      Environment: 
        Variables:
          REGION: !Sub ${AWS::Region}
          USERS_TABLE_NAME: !Ref UsersTableName
      #Deployment Configurtion           
      AutoPublishAlias: live            
      DeploymentPreference:
        #Type: Linear10PercentEvery1Minute
        Type: AllAtOnce                              
# API Gateway Private REST API
  HelloApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage     
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref PrivateAPIVPCEndpoint  
      Auth:
        ResourcePolicy:
          CustomStatements: [{
            "Effect": "Allow",
            "Principal": "*",
            "Action": "execute-api:Invoke",
            "Resource": !Sub "execute-api:/${Stage}/GET/hello",
            "Condition": {
              "StringEquals": {
                "aws:SourceVpce": !Ref PrivateAPIVPCEndpoint
              }                        
            }
          }]
  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${Stage}
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref PrivateAPIVPCEndpoint  
      Auth:
        ResourcePolicy:
          CustomStatements: [{
            "Effect": "Allow",
            "Principal": "*",
            "Action": "execute-api:Invoke",
            "Resource": !Sub "execute-api:/${Stage}/POST/users",
            "Condition": {
              "StringEquals": {
                "aws:SourceVpce": !Ref PrivateAPIVPCEndpoint
              }                        
            }
          }]
  #DynamoDB
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UsersTableName
      KeySchema:
        - AttributeName: user_id
          KeyType:  HASH
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1       

# Application Insights
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

# Security Group for VPC Endpoint  
  PrivateAPISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${StackPrefix}-VPC-ID
      GroupDescription: Access to the API Gateway Private API
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: 
            Fn::ImportValue: !Sub ${StackPrefix}-BastionSecurityGroup-ID
          #CidrIp: !FindInMap [CidrConfig, !Ref EnvironmentType, VPC]
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-PrivateAPI-SG
# VPC Endpoint for API Gateway
  PrivateAPIVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:      
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      SubnetIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetOneId
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetTwoId
      VpcId: 
        Fn::ImportValue: !Sub ${StackPrefix}-VPC-ID          
      SecurityGroupIds: 
        - !GetAtt PrivateAPISecurityGroup.GroupId
      PrivateDnsEnabled: true
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldAPI:
    Description: API Gateway endpoint URL for Prod environment for First Function
    #Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"
    Value: !Sub "https://${HelloApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello"
  HelloWorldFunction:
    Description: First Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
  UsersAPI:
    Description: "API Gateway endpoint URL for Prod environment"
    Value: !Sub "https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/users/"
  PostUsersFunction:
    Description: "Post Users Lambda Function ARN"
    Value: !GetAtt PostUsersFunction.Arn
  PostUsersFunctionIamRole:
    Description: "Implicit IAM Role created for Post Users function ARN"
    Value: !GetAtt PostUsersFunctionRole.Arn
  PostUsersFunctionDeploymentGroup :
    Description: "Post Users Lambda Function DeploymentGroup ARN"
    Value: !Ref PostUsersFunctionDeploymentGroup