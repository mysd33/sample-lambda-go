AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  todo-app
  Sample SAM Template for todo-app
Parameters:
  StackPrefix:
    Description: Stack Resource Name Prefix
    Type: String
    Default: Demo
  TracingValue:
    Type: String
    Default: Active
  Stage:
    Type: String
    AllowedValues:
      - Prod
      - Staging
      - Dev
    Default: Prod
  MemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 128
  HelloWorldFunctionName:
    Type: String
    Default: hello-world
  UsersFunctionName:
    Type: String
    Default: user-function
  TodoFunctionName:
    Type: String
    Default: todo-function
  BffFunctionName:
    Type: String
    Default: bff-function
  TodoAsyncFunctionName:
    Type: String
    Default: todo-async-function
  TodoAsyncFifoFunctionName:
    Type: String
    Default: todo-async-fifo-function  
  LogLevel:
    Type: String
#    Default: INFO
    Default: DEBUG
Mappings:
  AppConfigExtentionsLayerMap:
    #Tokyo
    ap-northeast-1:
      x86: arn:aws:lambda:ap-northeast-1:980059726660:layer:AWS-AppConfig-Extension:98           
      arm: arn:aws:lambda:ap-northeast-1:980059726660:layer:AWS-AppConfig-Extension-Arm64:51           
    #Osaka
    ap-northeast-3:
      x86: arn:aws:lambda:ap-northeast-3:706869817123:layer:AWS-AppConfig-Extension:101           
      arm: arn:aws:lambda:ap-northeast-3:706869817123:layer:AWS-AppConfig-Extension-Arm64:16
  LambdaInsightsExtensionsLayerMap:
    #Tokyo
    ap-northeast-1:
      x86: arn:aws:lambda:ap-northeast-1:580247275435:layer:LambdaInsightsExtension:72    
      arm: arn:aws:lambda:ap-northeast-1:580247275435:layer:LambdaInsightsExtension-Arm64:23
    #Osaka
    ap-northeast-3:
      x86: arn:aws:lambda:ap-northeast-3:194566237122:layer:LambdaInsightsExtension:26
      arm: arn:aws:lambda:ap-northeast-3:194566237122:layer:LambdaInsightsExtension-Arm64:9   
Conditions:
  TracingEnabled: !Equals
    - !Ref TracingValue
    - Active
Globals:
  Function:
    Handler: bootstrap
    Runtime: provided.al2023
#    Runtime: go1.x
    Architectures:
      - x86_64
    Timeout: 5
    MemorySize: !Ref MemorySize
    Tracing: !Ref TracingValue
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-LambdaSecurityGroup-ID
      SubnetIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetOneId
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetTwoId
    Environment:
      Variables:
        # Environment Profile      
        ENV: !Ref Stage
        # AppConfig
        APPCONFIG_HOSTED_EXTENSION_URL:
          Fn::ImportValue: !Sub ${StackPrefix}-AppConfigHostedProfileLambdaExtension${Stage}URL        
        APPCONFIG_SM_EXTENSION_URL:
          Fn::ImportValue: !Sub ${StackPrefix}-AppConfigSMProfileLambdaExtension${Stage}URL
        AWS_APPCONFIG_EXTENSION_PREFETCH_LIST:
          Fn::ImportValue: !Sub ${StackPrefix}-AppConfigLambdaExtension${Stage}Path
        # Timezone
        TZ: Asia/Tokyo
        # LogLevel
        LOG_LEVEL: !Ref LogLevel
    # Deployment Configurtion
    AutoPublishAlias: live
    DeploymentPreference:
      #Type: Linear10PercentEvery1Minute
      Type: AllAtOnce
    Layers:
      # AppConfig Extensions Lambda Layer    
      - !FindInMap [AppConfigExtentionsLayerMap, !Ref AWS::Region , x86]
      # Lambda Insights Extensions Lambda Layer    
      - !FindInMap [LambdaInsightsExtensionsLayerMap, !Ref AWS::Region , x86]
  Api:
    OpenApiVersion: 3.0.3
    TracingEnabled: !If [TracingEnabled , true, false]
    MethodSettings:
      - DataTraceEnabled: true
        LoggingLevel: ERROR
        ResourcePath: /*
        HttpMethod: '*'
    AccessLogSetting:
      Format: '{ "requestId":"$context.requestId", "extendedRequestId":"$context.extendedRequestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength", "integrationLatency":"$context.integration.latency", "responseLatency":"$context.responseLatency" }'
      DestinationArn: !GetAtt ApiGwAccessLogGroup.Arn
Resources:
  HelloWorldFunction:
# Lambda Function
# HelloWorld 
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
#      Handler: hello-world
      FunctionName: !Ref HelloWorldFunctionName
      CodeUri: app/cmd/hello-world
      Role:
        Fn::ImportValue: !Sub ${StackPrefix}-LambdaRoleArn      
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
            RestApiId: !Ref HelloApi
      Environment:
        Variables:
          PARAM1: VALUE
# Bff Function
  BffFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
#      Handler: bff    
      FunctionName: !Ref BffFunctionName
      CodeUri: app/cmd/bff/
      Role: !ImportValue
        Fn::Sub: ${StackPrefix}-LambdaRoleArn
      Events:
        Event:
          Type: Api
          Properties:
            Path: /bff-api/{proxy+}
            Method: ANY
            RestApiId: !Ref BffApi          
# User Function
  UsersFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
#      Handler: users    
      FunctionName: !Ref UsersFunctionName
      CodeUri: app/cmd/users/  
      Role:
        Fn::ImportValue: !Sub ${StackPrefix}-LambdaRoleArn      
      Events:
        Event:
          Type: Api
          Properties:
            Path: /users-api/{proxy+}
            Method: ANY
            RestApiId: !Ref UserApi
# Todo Function(API Triggered)
  TodoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
#      Handler: todo    
      FunctionName: !Ref TodoFunctionName
      CodeUri: app/cmd/todo/
      Role:
        Fn::ImportValue: !Sub ${StackPrefix}-LambdaRoleArn  
      Events:
        Event:
          Type: Api
          Properties:
            Path: /todo-api/{proxy+}
            Method: ANY
            RestApiId: !Ref TodoApi   
# Todo Async Function(SQS Triggered)
  TodoAsyncFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
#      Handler: todo-async
      FunctionName: !Ref TodoAsyncFunctionName
      CodeUri: app/cmd/todo-async/
      Role: !ImportValue
        Fn::Sub: ${StackPrefix}-LambdaRoleArn
      Events:
        Event:
          Type: SQS
          Properties:
            Queue: !ImportValue
              Fn::Sub: ${StackPrefix}-SQSQueueArn
            FunctionResponseTypes:
              - ReportBatchItemFailures
  TodoAsyncFifoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
#      Handler: todo-async-fifo
      FunctionName: !Ref TodoAsyncFifoFunctionName
      CodeUri: app/cmd/todo-async/
      Role: !ImportValue
        Fn::Sub: ${StackPrefix}-LambdaRoleArn
      Events:
        Event:
          Type: SQS
          Properties:
            Queue: !ImportValue
              Fn::Sub: ${StackPrefix}-SQSFifoQueueArn
            FunctionResponseTypes:
              - ReportBatchItemFailures              
# API Gateway Private REST API
# Bff API(Regional Public API)
  BffApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: bff-api
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL
# HelloWorld(Private API)
  HelloApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: hello-world-api
      StageName: !Ref Stage 
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - Fn::ImportValue: !Sub ${StackPrefix}-PrivateAPIVPCEndpoint-ID
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: !Sub execute-api:/${Stage}/GET/hello
              Condition:
                StringEquals:
                  aws:SourceVpce: !ImportValue
                    Fn::Sub: ${StackPrefix}-PrivateAPIVPCEndpoint-ID        
# User API(Private API) 
  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: user-api
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - Fn::ImportValue: !Sub ${StackPrefix}-PrivateAPIVPCEndpoint-ID
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource:
                - !Sub execute-api:/${Stage}/POST/users-api/*
                - !Sub execute-api:/${Stage}/GET/users-api/*
              Condition:
                StringEquals:
                  aws:SourceVpce: !ImportValue
                    Fn::Sub: ${StackPrefix}-PrivateAPIVPCEndpoint-ID
# Todo API(Private API)
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: todo-api
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - Fn::ImportValue: !Sub ${StackPrefix}-PrivateAPIVPCEndpoint-ID      
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource:
                - !Sub execute-api:/${Stage}/POST/todo-api/*
                - !Sub execute-api:/${Stage}/GET/todo-api/*
              Condition:
                StringEquals:
                  aws:SourceVpce: !ImportValue
                    Fn::Sub: ${StackPrefix}-PrivateAPIVPCEndpoint-ID

# IAM Role for API Gateway Account
  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
# API Gateway Account Config
  ApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayRole.Arn
# API Gateway Access Log Group
  ApiGwAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/accesslog/${AWS::StackName}
      RetentionInDays: 7
# Lambda Log group
  HelloWorldFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${HelloWorldFunctionName}
      RetentionInDays: 7
  UsersFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UsersFunctionName}
      RetentionInDays: 7
  TodoFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TodoFunctionName}
      RetentionInDays: 7
  BffFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${BffFunctionName}
      RetentionInDays: 7
  TodoAsyncFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TodoAsyncFunctionName}
      RetentionInDays: 7
  TodoAsyncFifoFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TodoAsyncFifoFunctionName}
      RetentionInDays: 7      
# Application Insights
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  BffAPI:
    Description: API Gateway endpoint URL for Bff
    Value: !Sub https://${BffApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/bff-api/v1/
  BffFunction:
    Description: Bff Lambda Function ARN
    Value: !GetAtt BffFunction.Arn
  BffFunctionDeploymentGroup:
    Description: Bff Lambda Function DeploymentGroup ARN
    Value: !Ref BffFunctionDeploymentGroup
  HelloWorldAPI:
    Description: API Gateway endpoint URL for HelloWorld
    Value: !Sub https://${HelloApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello
  HelloWorldFunction:
    Description: First Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  UsersAPIBaseURL:
    Description: API Gateway endpoint Base URL for Users
    Value: !Sub https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
    Export: 
      Name: !Sub ${StackPrefix}-UsersAPIBaseURL-${Stage}
  UsersAPI:
    Description: API Gateway endpoint URL for Users
    Value: !Sub https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/users-api/v1/users
  UsersFunction:
    Description: Users Lambda Function ARN
    Value: !GetAtt UsersFunction.Arn
  UsersFunctionDeploymentGroup:
    Description: Users Lambda Function DeploymentGroup ARN
    Value: !Ref UsersFunctionDeploymentGroup
  TodoAPIBaseURL:
    Description: API Gateway endpoint Base URL for Todo
    Value: !Sub https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
    Export: 
      Name: !Sub ${StackPrefix}-TodoAPIBaseURL-${Stage}
  TodoAPI:
    Description: API Gateway endpoint URL for Todo
    Value: !Sub https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/todo-api/v1/todo
  TodoFunction:
    Description: Todo Lambda Function ARN
    Value: !GetAtt TodoFunction.Arn
  TodoFunctionDeploymentGroup:
    Description: Todo Lambda Function DeploymentGroup ARN
    Value: !Ref TodoFunctionDeploymentGroup
  TodoAsyncFunction:
    Description: Todo Async Lambda Function ARN
    Value: !GetAtt TodoAsyncFunction.Arn