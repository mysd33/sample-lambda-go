AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  todo-app

  Sample SAM Template for todo-app

Parameters:      
  StackPrefix:
    Description: Stack Resource Name Prefix
    Type: String
    Default: Demo
  UsersTableName:
    Type: String
    Default: users    
  TodoTableName:
    Type: String
    Default: todo
  TracingValue:
    Type: String
    Default: Active
  Stage:
    Type: String
    Default: Prod
  MemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 128
  DBUsername:
    NoEcho: 'true'
    Description: Username for PostgreSQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: postgres
  DBPassword:
    NoEcho: 'true'
    Description: Password for PostgreSQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Default: password
  DBName:
    Description: Database Name
    Type: String
    Default: testdb    
Conditions:
  TracingEnabled: !Equals [!Ref TracingValue, Active]

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Handler: bootstrap
    Runtime: provided.al2
    Architectures:
      - x86_64
    Timeout: 5
    MemorySize: !Ref MemorySize
    Tracing: !Ref TracingValue
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-LambdaSecurityGroup-ID
      SubnetIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetOneId
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetTwoId
    Environment:
      Variables:
        REGION: !Sub ${AWS::Region}
        # For DynamoDB
        TODO_TABLE_NAME: !Ref TodoTableName
        USERS_TABLE_NAME: !Ref UsersTableName 
        # For RDB
        # TODO
        RDB_USER: !Ref DBUsername        
        RDB_PASSWORD: !Ref DBPassword
        RDB_ENDPOINT:
          Fn::ImportValue: !Sub ${StackPrefix}-RDSProxyEndpoint
        RDB_PORT: 5432
        RDB_DB_NAME: !Ref DBName
    # Deployment Configurtion           
    AutoPublishAlias: live            
    DeploymentPreference:
      #Type: Linear10PercentEvery1Minute
      Type: AllAtOnce
  Api:
    EndpointConfiguration:
      Type: PRIVATE
      VPCEndpointIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateAPIVPCEndpoint-ID
    TracingEnabled: !If [TracingEnabled , true, false]
    MethodSettings:
      - DataTraceEnabled: true
        LoggingLevel: 'ERROR'
        ResourcePath: '/*'
        HttpMethod: '*'     
Resources:
  HelloWorldFunction:
# Lambda Function
# HelloWorld 
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: hello-world    
      CodeUri: app/cmd/hello-world
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: GET
            RestApiId: !Ref HelloApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
# User API  
  GetUsersFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x    
    Properties:
      FunctionName: get-user-function
      CodeUri: app/cmd/users/  
      Policies: 
      - AmazonDynamoDBReadOnlyAccess 
      Events:
        GetEvent:
          Type: Api
          Properties:            
            Path: /users/{user_id}
            Method: GET
            RestApiId: !Ref UserApi            
      Environment: 
        Variables:
          REGION: !Sub ${AWS::Region}
          USERS_TABLE_NAME: !Ref UsersTableName        
      #Deployment Configurtion           
      AutoPublishAlias: live
      DeploymentPreference:
        #Type: Linear10PercentEvery1Minute
        Type: AllAtOnce  
  PostUsersFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x    
    Properties:
      FunctionName: post-user-function
      CodeUri: app/cmd/users/
      Policies: 
      - AmazonDynamoDBFullAccess           
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /users
            Method: POST
            RestApiId: !Ref UserApi                           
# Todo API
  GetTodoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x    
    Properties:
      FunctionName: get-todo-function
      CodeUri: app/cmd/todo/
      Policies: 
      - AmazonDynamoDBReadOnlyAccess 
      Events:
        GetEvent:
          Type: Api
          Properties:            
            Path: /todo/{todo_id}
            Method: GET
            RestApiId: !Ref TodoApi
  PostTodoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x    
    Properties:
      FunctionName: post-todo-function
      CodeUri: app/cmd/todo/
      Policies: 
      - AmazonDynamoDBFullAccess           
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /todo
            Method: POST
            RestApiId: !Ref TodoApi
# API Gateway Private REST API
# HelloWorld 
  HelloApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: hello-world-api
      StageName: !Ref Stage  
      Auth:
        ResourcePolicy:
          CustomStatements: [{
            "Effect": "Allow",
            "Principal": "*",
            "Action": "execute-api:Invoke",
            "Resource": !Sub "execute-api:/${Stage}/GET/hello",
            "Condition": {
              "StringEquals": {
                "aws:SourceVpce": { "Fn::ImportValue" : {"Fn::Sub" : "${StackPrefix}-PrivateAPIVPCEndpoint-ID" }}
              }                        
            }
          }]
# User API          
  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: user-api
      StageName: !Sub ${Stage}        
      Auth:
        ResourcePolicy:
          CustomStatements: [{
            "Effect": "Allow",
            "Principal": "*",
            "Action": "execute-api:Invoke",
            "Resource": [
              !Sub "execute-api:/${Stage}/POST/users",
              !Sub "execute-api:/${Stage}/GET/users/*",
            ],
            "Condition": {
              "StringEquals": {
                "aws:SourceVpce": { "Fn::ImportValue" : {"Fn::Sub" : "${StackPrefix}-PrivateAPIVPCEndpoint-ID" }}                
              }                        
            }
          }]
# Todo API
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: todo-api
      StageName: !Sub ${Stage}         
      Auth:
        ResourcePolicy:
          CustomStatements: [{
            "Effect": "Allow",
            "Principal": "*",
            "Action": "execute-api:Invoke",
            "Resource": [
              !Sub "execute-api:/${Stage}/POST/todo",
              !Sub "execute-api:/${Stage}/GET/todo/*",
            ],
            "Condition": {
              "StringEquals": {
                "aws:SourceVpce": { "Fn::ImportValue" : {"Fn::Sub" : "${StackPrefix}-PrivateAPIVPCEndpoint-ID" }}                
              }                        
            }
          }]          
  #IAM Role for API Gateway Account
  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:      
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com      
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
# API Gateway Account Config
  ApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayRole.Arn

# DynamoDB
  # User table on DynamoDB is not used now
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UsersTableName
      KeySchema:
        - AttributeName: user_id
          KeyType:  HASH
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1       
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TodoTableName
      KeySchema:
        - AttributeName: todo_id
          KeyType:  HASH
      AttributeDefinitions:
        - AttributeName: todo_id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

# Application Insights
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldAPI:
    Description: API Gateway endpoint URL for Prod environment for First Function
    #Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"
    Value: !Sub "https://${HelloApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello"
  HelloWorldFunction:
    Description: First Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
  UsersAPI:
    Description: "API Gateway endpoint URL for Prod environment"
    Value: !Sub "https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/users"
  GetUsersFunction:
    Description: "Get Users Lambda Function ARN"
    Value: !GetAtt GetUsersFunction.Arn
  GetUsersFunctionIamRole:
    Description: "Implicit IAM Role created for Get Users function ARN"
    Value: !GetAtt GetUsersFunctionRole.Arn
  GetUsersFunctionDeploymentGroup :
    Description: "Get Users Lambda Function DeploymentGroup ARN"
    Value: !Ref GetUsersFunctionDeploymentGroup
  PostUsersFunction:
    Description: "Post Users Lambda Function ARN"
    Value: !GetAtt PostUsersFunction.Arn
  PostUsersFunctionIamRole:
    Description: "Implicit IAM Role created for Post Users function ARN"
    Value: !GetAtt PostUsersFunctionRole.Arn
  PostUsersFunctionDeploymentGroup :
    Description: "Post Users Lambda Function DeploymentGroup ARN"
    Value: !Ref PostUsersFunctionDeploymentGroup
  TodoAPI:
    Description: "API Gateway endpoint URL for Prod environment"
    Value: !Sub "https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/todo"
  GetTodoFunction:
    Description: "Get Todo Lambda Function ARN"
    Value: !GetAtt GetTodoFunction.Arn
  GetTodoFunctionIamRole:
    Description: "Implicit IAM Role created for Get Todo function ARN"
    Value: !GetAtt GetTodoFunctionRole.Arn
  GetTodoFunctionDeploymentGroup :
    Description: "Get Todo Lambda Function DeploymentGroup ARN"
    Value: !Ref GetTodoFunctionDeploymentGroup
  PostTodoFunction:
    Description: "Post Todo Lambda Function ARN"
    Value: !GetAtt PostTodoFunction.Arn
  PostTodoFunctionIamRole:
    Description: "Implicit IAM Role created for Post Todo function ARN"
    Value: !GetAtt PostTodoFunctionRole.Arn
  PostTodoFunctionDeploymentGroup :
    Description: "Post Todo Lambda Function DeploymentGroup ARN"
    Value: !Ref PostTodoFunctionDeploymentGroup    