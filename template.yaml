AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  todo-app

  Sample SAM Template for todo-app

Parameters:      
  StackPrefix:
    Description: Stack Resource Name Prefix
    Type: String
    Default: Demo
#  UsersTableName:
#    Type: String
#    Default: users    
  TodoTableName:
    Type: String
    Default: todo
  TracingValue:
    Type: String
    Default: Active
  Stage:
    Type: String
    Default: Prod
  MemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 128 
  HelloWorldFunctionName:
    Type: String
    Default: hello-world      
  UsersFunctionName:
    Type: String
    Default: user-function
  TodoFunctionName:    
    Type: String
    Default: todo-function  
Conditions:
  TracingEnabled: !Equals [!Ref TracingValue, Active]

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Handler: bootstrap
    Runtime: provided.al2
    Architectures:
      - x86_64
    Timeout: 5
    MemorySize: !Ref MemorySize
    Tracing: !Ref TracingValue
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-LambdaSecurityGroup-ID
      SubnetIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetOneId
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetTwoId
    Environment:
      Variables:
        REGION: !Sub ${AWS::Region}
        # For DynamoDB
#        USERS_TABLE_NAME: !Ref UsersTableName         
        TODO_TABLE_NAME: !Ref TodoTableName
        # For RDB
        RDB_USER: !Sub "{{resolve:secretsmanager:${StackPrefix}-RDS-Secrets:SecretString:username}}"
        RDB_PASSWORD: !Sub "{{resolve:secretsmanager:${StackPrefix}-RDS-Secrets:SecretString:password}}"
        RDB_ENDPOINT:
          Fn::ImportValue: !Sub ${StackPrefix}-RDSProxyEndpoint
        RDB_PORT:
          Fn::ImportValue: !Sub ${StackPrefix}-RDSClusterEndpointPort
        RDB_DB_NAME:
          Fn::ImportValue: !Sub ${StackPrefix}-RDSDBName
        RDB_SSL_MODE: "require"
        DYNAMODB_LOCAL_ENDPOINT: ""
    # Deployment Configurtion           
    AutoPublishAlias: live            
    DeploymentPreference:
      #Type: Linear10PercentEvery1Minute
      Type: AllAtOnce
  Api:
    OpenApiVersion: 3.0.3      
    EndpointConfiguration:
      Type: PRIVATE
      VPCEndpointIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateAPIVPCEndpoint-ID
    TracingEnabled: !If [TracingEnabled , true, false]
    MethodSettings:
      - DataTraceEnabled: true
        LoggingLevel: 'ERROR'
        ResourcePath: '/*'
        HttpMethod: '*'   
    AccessLogSetting:
      Format: '{ "requestId":"$context.requestId", "extendedRequestId":"$context.extendedRequestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength", "integrationLatency":"$context.integration.latency", "responseLatency":"$context.responseLatency" }'
      DestinationArn: !GetAtt ApiGwAccessLogGroup.Arn
           
Resources:
  HelloWorldFunction:
# Lambda Function
# HelloWorld 
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Ref HelloWorldFunctionName
      CodeUri: app/cmd/hello-world
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: GET
            RestApiId: !Ref HelloApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
# User API  
  UsersFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x    
    Properties:
      FunctionName: !Ref UsersFunctionName
      CodeUri: app/cmd/users/  
      Events:
        GetEvent:
          Type: Api
          Properties:            
            Path: /users/{user_id}
            Method: GET
            RestApiId: !Ref UserApi
        PostEvent:
          Type: Api
          Properties:
            Path: /users
            Method: POST
            RestApiId: !Ref UserApi                           
# Todo API
  TodoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x    
    Properties:
      FunctionName: !Ref TodoFunctionName
      CodeUri: app/cmd/todo/
      Policies: 
        - DynamoDBCrudPolicy:
            TableName:
              !Ref TodoTableName                        
      Events:
        GetEvent:
          Type: Api
          Properties:            
            Path: /todo/{todo_id}
            Method: GET
            RestApiId: !Ref TodoApi
        PostEvent:
          Type: Api
          Properties:
            Path: /todo
            Method: POST
            RestApiId: !Ref TodoApi
# API Gateway Private REST API
# HelloWorld 
  HelloApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: hello-world-api
      StageName: !Ref Stage  
      Auth:
        ResourcePolicy:
          CustomStatements: [{
            "Effect": "Allow",
            "Principal": "*",
            "Action": "execute-api:Invoke",
            "Resource": !Sub "execute-api:/${Stage}/GET/hello",
            "Condition": {
              "StringEquals": {
                "aws:SourceVpce": { "Fn::ImportValue" : {"Fn::Sub" : "${StackPrefix}-PrivateAPIVPCEndpoint-ID" }}
              }                        
            }
          }]
# User API          
  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: user-api
      StageName: !Ref Stage
      Auth:
        ResourcePolicy:
          CustomStatements: [{
            "Effect": "Allow",
            "Principal": "*",
            "Action": "execute-api:Invoke",
            "Resource": [
              !Sub "execute-api:/${Stage}/POST/users",
              !Sub "execute-api:/${Stage}/GET/users/*",
            ],
            "Condition": {
              "StringEquals": {
                "aws:SourceVpce": { "Fn::ImportValue" : {"Fn::Sub" : "${StackPrefix}-PrivateAPIVPCEndpoint-ID" }}                
              }                        
            }
          }]
# Todo API
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: todo-api
      StageName: !Ref Stage
      Auth:
        ResourcePolicy:
          CustomStatements: [{
            "Effect": "Allow",
            "Principal": "*",
            "Action": "execute-api:Invoke",
            "Resource": [
              !Sub "execute-api:/${Stage}/POST/todo",
              !Sub "execute-api:/${Stage}/GET/todo/*",
            ],
            "Condition": {
              "StringEquals": {
                "aws:SourceVpce": { "Fn::ImportValue" : {"Fn::Sub" : "${StackPrefix}-PrivateAPIVPCEndpoint-ID" }}                
              }                        
            }
          }]        
# IAM Role for API Gateway Account
  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:      
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com      
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs 
# API Gateway Account Config
  ApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayRole.Arn
# API Gateway Access Log Group
  ApiGwAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/accesslog/${AWS::StackName}
      RetentionInDays: 7
# Lambda Log group
  HelloWorldFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${HelloWorldFunctionName}
      RetentionInDays: 7
  UsersFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UsersFunctionName}
      RetentionInDays: 7      
  TodoFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TodoFunctionName}
      RetentionInDays: 7
      
# Application Insights
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldAPI:
    Description: API Gateway endpoint URL for Prod environment for First Function
    #Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"
    Value: !Sub "https://${HelloApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello"
  HelloWorldFunction:
    Description: First Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
  UsersAPI:
    Description: "API Gateway endpoint URL for Prod environment"
    Value: !Sub "https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/users"
  UsersFunction:
    Description: "Users Lambda Function ARN"
    Value: !GetAtt UsersFunction.Arn
  UsersFunctionIamRole:
    Description: "Implicit IAM Role created for Users function ARN"
    Value: !GetAtt UsersFunctionRole.Arn
  UsersFunctionDeploymentGroup:
    Description: "Users Lambda Function DeploymentGroup ARN"
    Value: !Ref UsersFunctionDeploymentGroup
  TodoAPI:
    Description: "API Gateway endpoint URL for Prod environment"
    Value: !Sub "https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/todo"
  TodoFunction:
    Description: "Todo Lambda Function ARN"
    Value: !GetAtt TodoFunction.Arn
  TodoFunctionIamRole:
    Description: "Implicit IAM Role created for Todo function ARN"
    Value: !GetAtt TodoFunctionRole.Arn
  TodoFunctionDeploymentGroup:
    Description: "Todo Lambda Function DeploymentGroup ARN"
    Value: !Ref TodoFunctionDeploymentGroup