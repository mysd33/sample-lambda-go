AWSTemplateFormatVersion: 2010-09-09
Description: IAM Template for CloudFormation Demo. 
#Metadata: 

Parameters: 
  StackPrefix:
    Description: Stack Resource Name Prefix
    Type: String
    Default: Demo 
#Mappings: 

#Conditions: 

Resources:
  #IAM Profile and Role for Bastion
  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: BastionRole      
  BastionRole:  
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: 
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com  
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-BastionRole 
  #IAM Role for RDS Proxy
  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - rds.amazonaws.com
            Action:
              - sts:AssumeRole 
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-RDSProxyRole

  #AppConfig IAM Role
  AppConfigRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appconfig.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-AppConfigRole

  SecretManagerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${StackPrefix}-SecretManagerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue            
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
          - Effect: Allow
            Action:
              - kms:Decrypt            
            Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
            Condition:
              StringEquals:
                kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com
      Roles:
        - !Ref RDSProxyRole
        - !Ref AppConfigRole         

  #IAM Role for Lambda
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole 
      ManagedPolicyArns:        
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole       
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-LambdaRole
  LambdaAppConfigPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${StackPrefix}-LambdaAppConfigPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - appconfig:GetLatestConfiguration
              - appconfig:StartConfigurationSession
            Resource: "*"  
      Roles:
        - !Ref LambdaRole                  
  LambdaDynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:ConditionCheckItem
          - dynamodb:PutItem
          - dynamodb:DescribeTable
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:DescribeLimits
          - dynamodb:ListTables
          - dynamodb:CreateTable
          Effect: Allow
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/index/*
        - Action:
          - dynamodb:GetShardIterator
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:ListStreams
          - dynamodb:DescribeLimits
          Effect: Allow
          Resource:          
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/index/*          
      PolicyName: !Sub ${StackPrefix}-LambdaDynamoDBPolicy
      Roles:      
        - !Ref LambdaRole  
  LambdaSQSAccessPolicy:  
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:          
          - sqs:SendMessage
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          Effect: Allow
          Resource:
          - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*
      PolicyName: !Sub ${StackPrefix}-SQSPolicy
      Roles:
        - !Ref LambdaRole
  LambdaS3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:PutObject
          - s3:GetObject
          - s3:DeleteObject          
          - s3:ListBucket          
          Effect: Allow
          Resource:
          - !Sub arn:aws:s3:::*          
      PolicyName: !Sub ${StackPrefix}-S3Policy
      Roles:
        - !Ref LambdaRole
Outputs:
  BastionInstanceProfile:
    Description: BastionInstanceProfile Logical ID
    Value: !Ref BastionInstanceProfile
    Export: 
      Name: !Sub ${StackPrefix}-BastionInstanceProfile
  RDSProxyRoleArn:
    Description: RDSProxy Role Arn
    Value: !GetAtt RDSProxyRole.Arn
    Export: 
      Name: !Sub ${StackPrefix}-RDSProxyRoleArn
  AppConfigRoleArn:
    Description: AppConfig Role Arn
    Value: !GetAtt AppConfigRole.Arn
    Export: 
      Name: !Sub ${StackPrefix}-AppConfigRoleArn
  LambdaRoleArn:
    Description: Lambda Role Arn
    Value: !GetAtt LambdaRole.Arn
    Export: 
      Name: !Sub ${StackPrefix}-LambdaRoleArn      
   