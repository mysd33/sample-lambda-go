AWSTemplateFormatVersion: 2010-09-09
Description: IAM Template for CloudFormation Demo. 
#Metadata: 

Parameters: 
  StackPrefix:
    Description: Stack Resource Name Prefix
    Type: String
    Default: Demo 
  CodeBuildProjectName:
    Description: CodeBuild Project Name
    Type: String
    Default: demo-sam-ci
  CodeCommitRepositoryName:
    Description: Source Code Repository Location of CodeCommit
    Type: String
    Default: sample-lambda-go
  CodePipelineName:
    Description: CodePipeline Name
    Type: String
    Default: demo-sam-pipeline
  ArtifactS3BucketName:
    Description: Artifact Location of S3 Bucket
    Type: String
    Default: mysd33bucket123
  CacheS3Location:
    Description: Artifact Location of S3 Bucket Name/Prefix
    Type: String
    Default: mysd33bucket123/cache       
#Mappings: 

#Conditions: 

Resources:
  #IAM Profile and Role for Bastion
  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: BastionRole      
  BastionRole:  
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: 
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com  
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-BastionRole 
  #IAM Role for RDS Proxy
  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - rds.amazonaws.com
            Action:
              - sts:AssumeRole 
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-RDSProxyRole

  #AppConfig IAM Role
  AppConfigRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appconfig.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-AppConfigRole

  SecretManagerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${StackPrefix}-SecretManagerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue            
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
          - Effect: Allow
            Action:
              - kms:Decrypt            
            Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
            Condition:
              StringEquals:
                kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com
      Roles:
        - !Ref RDSProxyRole
        - !Ref AppConfigRole         

  #IAM Role for Lambda
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole 
      ManagedPolicyArns:        
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole       
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-LambdaRole
  LambdaAppConfigPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${StackPrefix}-LambdaAppConfigPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - appconfig:GetLatestConfiguration
              - appconfig:StartConfigurationSession
            Resource: "*"  
      Roles:
        - !Ref LambdaRole                  
  LambdaDynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:ConditionCheckItem
          - dynamodb:PutItem
          - dynamodb:DescribeTable
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:DescribeLimits
          - dynamodb:ListTables
          - dynamodb:CreateTable
          Effect: Allow
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/index/*
        - Action:
          - dynamodb:GetShardIterator
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:ListStreams
          - dynamodb:DescribeLimits
          Effect: Allow
          Resource:          
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/index/*          
      PolicyName: !Sub ${StackPrefix}-LambdaDynamoDBPolicy
      Roles:      
        - !Ref LambdaRole  
  LambdaSQSAccessPolicy:  
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:          
          - sqs:SendMessage
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          Effect: Allow
          Resource:
          - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*
      PolicyName: !Sub ${StackPrefix}-SQSPolicy
      Roles:
        - !Ref LambdaRole
  LambdaS3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:PutObject
          - s3:GetObject
          - s3:DeleteObject          
          - s3:ListBucket          
          Effect: Allow
          Resource:
          - !Sub arn:aws:s3:::*          
      PolicyName: !Sub ${StackPrefix}-S3Policy
      Roles:
        - !Ref LambdaRole

  #IAM Role and IAM Policy for CodeBuild
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'  
  #TODO: Review IAM Policy  
  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProjectName}
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProjectName}:*          
        - Action:
          - codecommit:GitPull
          Effect: Allow
          Resource:          
            - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepositoryName}    
        - Action:
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketAcl
          - s3:GetBucketLocation
          - s3:ListBucket
          Effect: Allow
          Resource: 
            - !Sub arn:aws:s3:::${ArtifactS3BucketName}
            - !Sub arn:aws:s3:::${ArtifactS3BucketName}/*      
            - !Sub arn:aws:s3:::${CacheS3Location}            
            - !Sub arn:aws:s3:::${CacheS3Location}/*
        - Action:
          - codeartifact:List*
          - codeartifact:Describe*
          - codeartifact:Get*
          - codeartifact:Read*
          - codeartifact:PublishPackageVersion          
          - codeartifact:PutPackageMetadata
          Effect: Allow
          Resource: 
            - !Sub arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:domain/*
            - !Sub arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:repository/*
            - !Sub arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:package/*
        - Action:
          - sts:GetServiceBearerToken
          Effect: Allow
          Resource:
            - "*"
          Condition:
            StringEquals:
              'sts:AWSServiceName': codeartifact.amazonaws.com
      PolicyName: !Sub ${StackPrefix}-CodeBuildPolicy
      Roles:
      - !Ref CodeBuildRole

  #CodePipeline Cloud Watch Event IAM Role and IAM Policy
  CodePipelineCloudWatchEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CodePipelineCloudWatchEventRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CloudWatch-Event-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource:
                  - !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelineName}

  #IAM Role and IAM Policy for CodePipeline
  #TODO: Review Required Actions of Policy Document
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineServiceRole
      Path: /
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: AWS-CodePipeline-Service-Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'                              
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 's3:*'
                Resource: '*'
Outputs:
  BastionInstanceProfile:
    Description: BastionInstanceProfile Logical ID
    Value: !Ref BastionInstanceProfile
    Export: 
      Name: !Sub ${StackPrefix}-BastionInstanceProfile
  RDSProxyRoleArn:
    Description: RDSProxy Role Arn
    Value: !GetAtt RDSProxyRole.Arn
    Export: 
      Name: !Sub ${StackPrefix}-RDSProxyRoleArn
  AppConfigRoleArn:
    Description: AppConfig Role Arn
    Value: !GetAtt AppConfigRole.Arn
    Export: 
      Name: !Sub ${StackPrefix}-AppConfigRoleArn
  LambdaRoleArn:
    Description: Lambda Role Arn
    Value: !GetAtt LambdaRole.Arn
    Export: 
      Name: !Sub ${StackPrefix}-LambdaRoleArn      
  CodeBuildRoleArn:
    Description: CodeBuildRole Arn
    Value: !GetAtt CodeBuildRole.Arn
    Export: 
      Name: !Sub ${StackPrefix}-CodeBuildRole-Arn
  CodePipelineCloudWatchEventRoleArn:
    Description: CodePipelineCloudWatchEventRole Arn
    Value: !GetAtt CodePipelineCloudWatchEventRole.Arn
    Export: 
      Name: !Sub ${StackPrefix}-CodePipelineCloudWatchEventRole-Arn
  CodePipelineServiceRoleArn:
    Description: CodePipelineServiceRole Arn
    Value: !GetAtt CodePipelineServiceRole.Arn
    Export: 
      Name: !Sub ${StackPrefix}-CodePipelineServiceRole-Arn